from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta
from bot.database import Session, News, Subscription
import logging
from sqlalchemy import or_, extract

logger = logging.getLogger(__name__)

def send_news_to_subscribers(bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    with Session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        news = session.query(News).filter(
            News.published_at >= datetime.utcnow() - timedelta(hours=1)
        ).order_by(News.published_at.desc()).limit(5).all()
        
        if not news:
            logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        news_text = "üïí *–ï–∂–µ—á–∞—Å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç*\n\n" + "\n".join(
            f"‚Ä¢ [{n.title}]({n.url}) ({n.published_at.strftime('%H:%M')})" 
            for n in news
        )

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –≤ —ç—Ç–æ—Ç —á–∞—Å
        subscribers = session.query(Subscription).filter(
            Subscription.is_active == True,
            or_(
                Subscription.last_sent_at == None,
                Subscription.last_sent_at < datetime.utcnow() - timedelta(hours=1)
            )
        ).all()
        
        success_count = 0
        for sub in subscribers:
            try:
                bot.send_message(
                    sub.user_id,
                    news_text,
                    parse_mode="Markdown",
                    disable_web_page_preview=True
                )
                sub.last_sent_at = datetime.utcnow()
                success_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {sub.user_id}: {e}")
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ "—á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" - –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if "chat not found" in str(e).lower():
                    sub.is_active = False
                
        session.commit()
        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}/{len(subscribers)}")

def start_scheduler(bot):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –µ–∂–µ—á–∞—Å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–æ–π"""
    scheduler = BackgroundScheduler()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ—á–∞—Å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    scheduler.add_job(
        lambda: send_news_to_subscribers(bot),
        'interval',
        hours=1,  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∞—Å–∞—Ö
        next_run_time=datetime.now() + timedelta(seconds=10),  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫
        misfire_grace_time=300,  # –î–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏
        coalesce=True  # –û–±—ä–µ–¥–∏–Ω—è—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    )
    
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –µ–∂–µ—á–∞—Å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")