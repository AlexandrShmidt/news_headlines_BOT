import logging
from pathlib import Path
from telebot import TeleBot, types
from telebot.types import BotCommand
from bot.config import config
from bot.parsers import get_ratings_ru_news
from bot.keyboards import start_keyboard
from bot.database import (
    get_latest_news,
    Session,
    Subscription,
)
from bot.scheduler import start_scheduler

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
def setup_logger():
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        
        # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
        log_file = log_dir / "bot.log"
        print(f"–õ–æ–≥–∏ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤: {log_file.absolute()}")  # –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_file, encoding='utf-8'),
                logging.StreamHandler()  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
            ],
            force=True  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        )
        
        logger = logging.getLogger(__name__)
        logger.info("=== –õ–æ–≥–≥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ===")
        return logger
        
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò –õ–û–ì–ì–ï–†–ê: {e}")
        raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
logger = setup_logger()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = TeleBot(config.BOT_TOKEN)
start_scheduler(bot)

def format_news_for_telegram(news_items: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ë–î –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ Telegram"""
    formatted = []
    for item in news_items:
        domain = item['source'].replace("www.", "")
        formatted.append(f"[{item['title']}]({item['url']}) ({domain})")
    return "\n\n".join(formatted)

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é ---
def setup_bot_commands():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é"""
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("news", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"),
        BotCommand("subscribe", "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"),
        BotCommand("unsubscribe", "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"),
        BotCommand("help", "–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"),
    ]
    bot.set_my_commands(commands)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@bot.message_handler(commands=['start'])
def handle_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    try:
        user_name = message.from_user.first_name
        welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user_name}!
–Ø –±–æ—Ç –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.

üìå –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:

/news - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
/help - –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.
        """
        
        bot.send_message(
            chat_id=message.chat.id,
            text=welcome_text,
            reply_markup=start_keyboard(),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        bot.send_message(
            chat_id=message.chat.id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.",
            parse_mode="Markdown"
        )

@bot.message_handler(commands=['help'])
def handle_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìå *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/news - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

‚ÑπÔ∏è –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.
    """
    bot.send_message(
        chat_id=message.chat.id,
        text=help_text,
        parse_mode="Markdown"
    )

@bot.message_handler(commands=['news'])
def handle_news_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /news"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ë–î
        db_news = get_latest_news(limit=10)
        
        if db_news:
            formatted_news = format_news_for_telegram(db_news)
            bot.send_message(
                message.chat.id,
                "üì∞ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:*\n\n" + formatted_news,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
        else:
            news = get_ratings_ru_news()
            if news:
                bot.send_message(
                    message.chat.id,
                    "üì∞ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ):*\n\n" + "\n\n".join(news),
                    parse_mode="Markdown",
                    disable_web_page_preview=True
                )
            else:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π.")

@bot.callback_query_handler(func=lambda call: call.data == "news_menu")
def handle_news_menu(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    handle_news_command(call.message)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –¥–ª—è /news
    bot.answer_callback_query(call.id)

@bot.message_handler(commands=['subscribe'])
def handle_subscribe(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe"""
    with Session() as session:
        sub = session.query(Subscription).filter_by(user_id=message.from_user.id).first()
        
        if not sub:
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç –≤–æ–æ–±—â–µ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            new_sub = Subscription(user_id=message.from_user.id, is_active=True)
            session.add(new_sub)
            session.commit()
            bot.reply_to(message, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!")
        elif not sub.is_active:
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å, –Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
            sub.is_active = True
            session.commit()
            bot.reply_to(message, "‚úÖ –í—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!")
        else:
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞
            bot.reply_to(message, "‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!")

@bot.message_handler(commands=['unsubscribe'])
def handle_unsubscribe(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unsubscribe"""
    with Session() as session:
        sub = session.query(Subscription).filter_by(user_id=message.from_user.id).first()
        if sub and sub.is_active:
            sub.is_active = False
            session.commit()
            bot.reply_to(message, "üîï –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
        elif sub and not sub.is_active:
            bot.reply_to(message, "‚ÑπÔ∏è –í—ã —É–∂–µ –æ—Ç–ø–∏—Å–∞–Ω—ã.")
        else:
            bot.reply_to(message, "‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    setup_bot_commands()  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()